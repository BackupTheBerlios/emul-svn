--- a/Makefile.am	2005-03-31 14:17:39.000000000 -0600
+++ b/Makefile.am	2005-04-01 20:16:40.634502440 -0600
@@ -35,14 +35,14 @@
 #
 sbin_PROGRAMS = gpsd
 gpsd_SOURCES = gpsd.c
-gpsd_LDADD = $(LIBM) libgps.la -lm
+gpsd_LDADD = -lemul $(LIBM) libgps.la -lm
 
 
 #
 # Build sirfmon
 #
 sirfmon_SOURCES = sirfmon.c
-sirfmon_LDADD = $(LIBM) -lncurses libgps.la -lm 
+sirfmon_LDADD = -lemul $(LIBM) -lncurses libgps.la -lm
 
 #
 # Build shared library
@@ -65,7 +65,7 @@
 	sirf.c \
 	report.c
 
-libgps_la_LIBADD = $(LIBM) $(LIBC) $(LIBNSL) $(LIBSOCKET)
+libgps_la_LIBADD = -lemul $(LIBM) $(LIBC) $(LIBNSL) $(LIBSOCKET)
 
 #
 # Create Manpages
--- a/configure.ac	2005-03-31 16:54:42.000000000 -0600
+++ b/configure.ac	2005-04-02 06:09:57.953887328 -0600
@@ -62,6 +62,8 @@
 AC_SUBST(LIBM)
 AC_CHECK_LIB(c, open, LIBC="-lc")
 AC_SUBST(LIBC)
+AC_CHECK_LIB(emul, em_close, LIBEMUL="-lemul")
+AC_SUBST(LIBEMUL)
 
 AH_VERBATIM([_GNU_SOURCE],
           [/* Macro for declaring function arguments unused. */
--- a/drivers.c	2005-03-31 16:53:37.000000000 -0600
+++ b/drivers.c	2005-04-01 20:15:56.763171896 -0600
@@ -3,6 +3,7 @@
 #include <string.h>
 #include <errno.h>
 #include <sys/time.h>
+#include <emul.h>
 
 #include "gpsd.h"
 
@@ -47,7 +48,7 @@
 
 static int nmea_write_rtcm(struct gps_device_t *session, char *buf, int rtcmbytes)
 {
-    return write(session->gpsdata.gps_fd, buf, rtcmbytes);
+    return WRITE(session->gpsdata.gps_fd, buf, rtcmbytes);
 }
 
 static void nmea_initializer(struct gps_device_t *session)
@@ -222,7 +223,7 @@
 
 static void earthmate_initializer(struct gps_device_t *session)
 {
-    write(session->gpsdata.gps_fd, "EARTHA\r\n", 8);
+    WRITE(session->gpsdata.gps_fd, "EARTHA\r\n", 8);
     usleep(10000);
     session->device_type = &zodiac_binary;
     zodiac_binary.wrapup = earthmate_close;
--- a/garmin.c	2005-03-30 22:43:48.000000000 -0600
+++ b/garmin.c	2005-04-01 20:30:22.968488672 -0600
@@ -42,6 +42,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <errno.h>
+#include <emul.h>
 
 #if defined (HAVE_SYS_SELECT_H)
 #include <sys/select.h>
@@ -465,7 +466,7 @@
         gpsd_report(4, "SendPacket(), writing %d bytes\n", theBytesToWrite);
         PrintPacket ( session,  aPacket);
 
-	theBytesReturned = write( session->gpsdata.gps_fd
+	theBytesReturned = WRITE( session->gpsdata.gps_fd
 		    , aPacket, theBytesToWrite);
 	gpsd_report(4, "SendPacket(), wrote %d bytes\n", theBytesReturned);
 
@@ -479,7 +480,7 @@
 	// So here goes just in case
 	if( 0 == (theBytesToWrite % ASYNC_DATA_SIZE) ) {
 		char *n = "";
-		theBytesReturned = write( session->gpsdata.gps_fd
+		theBytesReturned = WRITE( session->gpsdata.gps_fd
 		    , &n, 0);
 	}
 }
@@ -520,7 +521,7 @@
 	// the USB not too bad for a start
 	long theBytesReturned = 0;
 
-	theBytesReturned = read(session->gpsdata.gps_fd
+	theBytesReturned = READ(session->gpsdata.gps_fd
 		, &session->GarminBuffer[session->GarminBufferLen]
 		, ASYNC_DATA_SIZE);
         if ( 0 >  theBytesReturned ) {
@@ -696,7 +697,10 @@
         memcpy((char *)&rfds, (char *)&fds, sizeof(rfds));
 
 	tv.tv_sec = 1; tv.tv_usec = 0;
-	sel_ret = select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
+	if (!em_isemate())
+		sel_ret = select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
+	else
+		sel_ret = em_select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
 	if (sel_ret < 0) {
 	    if (errno == EINTR)
 		continue;
--- gpsd-orig/gpsd-2.20/gpsd.c	2005-03-31 13:49:16.000000000 -0600
+++ gpsd-2.20/gpsd.c	2005-04-02 13:13:59.430778096 -0600
@@ -13,6 +13,7 @@
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <assert.h>
+#include <emul.h>
 
 #include "config.h"
 #if defined (HAVE_PATH_H)
@@ -35,6 +36,7 @@
 
 #define QLEN			5
 
+
 static fd_set all_fds;
 static int debuglevel, in_background = 0;
 static jmp_buf restartbuf;
@@ -272,7 +274,7 @@
 /* restrict the scope of the command-state globals as much as possible */
 static struct gps_device_t *device;
 static int need_gps;
-#define is_client(cfd)	(cfd != msock && cfd != device->gpsdata.gps_fd) 
+#define is_client(cfd) (cfd != msock && (em_isemate() ? 1 : cfd != device->gpsdata.gps_fd))
 #endif /* MULTISESSION */
 
 static void raw_hook(struct gps_data_t *ud UNUSED, char *sentence)
@@ -307,7 +309,8 @@
 	if (gpsd_activate(device) < 0) {
 	    return NULL;
 	}
-	FD_SET(device->gpsdata.gps_fd, &all_fds);
+	if (!em_isemate())
+		FD_SET(device->gpsdata.gps_fd, &all_fds);
     }
 
     return device;
@@ -357,7 +360,10 @@
 			 * The minimum delay time is probably constant
 			 * across any given type of UART.
 			 */
-			tcdrain(device->gpsdata.gps_fd);
+			if (!em_isemate())
+				tcdrain(device->gpsdata.gps_fd);
+			else
+				em_writewait();
 			usleep(50000);
 			gpsd_set_speed(device, (speed_t)i, 1);
 		    }
@@ -411,6 +417,10 @@
 		    device->gpsd_device = strdup(bufcopy);
 		    device->gpsdata.baudrate = 0;	/* so it'll hunt */
 		    device->driverstate = 0;
+		    if (strcmp(device->gpsd_device, "emate")==0)
+		       em_devtype(EMATE);
+		    else
+		       em_devtype(NORMAL);
 		    if (gpsd_activate(device) >= 0) {
 			gpsd_report(1, "Switch to %s succeeded\n", bufcopy);
 			free(stash_device);
@@ -420,6 +430,10 @@
 			device->gpsd_device = stash_device;
 			device->gpsdata.baudrate = 0;
 			device->driverstate = 0;
+			if (strcmp(device->gpsd_device, "emate")==0)
+				em_devtype(EMATE);
+			else
+				em_devtype(NORMAL);
 		    }
 		}
 #else
@@ -746,6 +760,14 @@
     if (go_background)
 	daemonize();
 
+    if (strcmp(device_name, "emate")==0)
+   em_devtype(EMATE);
+    else
+   em_devtype(NORMAL);
+
+    if ((debuglevel-8)>0)
+   em_debuglevel((debuglevel-8));
+
     if (pid_file) {
 	FILE *fp;
 
@@ -821,12 +843,21 @@
 	 * the file descriptors in the set goes ready. 
 	 */
 	tv.tv_sec = 1; tv.tv_usec = 0;
+	if (em_isemate()) {
+		if (em_select(FD_SETSIZE, &rfds, NULL, NULL, &tv)<0) {
+			if (errno == EINTR)
+				continue;
+			gpsd_report(0, "em_select: %s\n", strerror(errno));
+			exit(2);
+		}
+	} else {
 	if (select(FD_SETSIZE, &rfds, NULL, NULL, &tv) < 0) {
 	    if (errno == EINTR)
 		continue;
 	    gpsd_report(0, "select: %s\n", strerror(errno));
 	    exit(2);
 	}
+	}
 
 	/* always be open to new client connections */
 	if (FD_ISSET(msock, &rfds)) {
@@ -866,7 +897,8 @@
 	    if (nowait && device->gpsdata.gps_fd == -1) {
 		gpsd_deactivate(device);
 		if (gpsd_activate(device) >= 0) {
-		    FD_SET(device->gpsdata.gps_fd, &all_fds);
+		    if (!em_isemate())
+		       FD_SET(device->gpsdata.gps_fd, &all_fds);
 		    notify_watchers("GPSD,X=1\r\n");
 		}
 	    }
@@ -875,7 +907,8 @@
 	    changed = 0;
 	    if (device->gpsdata.gps_fd >= 0 && !((changed=gpsd_poll(device)) | ONLINE_SET)) {
 		gpsd_report(3, "GPS is offline\n");
-		FD_CLR(device->gpsdata.gps_fd, &all_fds);
+		if (!em_isemate())
+			FD_CLR(device->gpsdata.gps_fd, &all_fds);
 		gpsd_deactivate(device);
 		notify_watchers("GPSD,X=0\r\n");
 	    }
@@ -925,7 +958,8 @@
 		if (device->gpsdata.gps_fd == -1) {
 		    gpsd_deactivate(device);
 		    if (gpsd_activate(device) >= 0) {
-			FD_SET(device->gpsdata.gps_fd, &all_fds);
+			if (!em_isemate())
+				FD_SET(device->gpsdata.gps_fd, &all_fds);
 			notify_watchers("GPSD,X=1\r\n");
 		    }
 		}
@@ -947,7 +981,8 @@
 		}
 	    }
 #ifndef MULTISESSION
-	    if (cfd != device->gpsdata.gps_fd && cfd != msock && FD_ISSET(cfd, &all_fds))
+	    if ((em_isemate() ? 1 : (cfd != device->gpsdata.gps_fd)) &&
+			 cfd != msock && FD_ISSET(cfd, &all_fds))
 		need_gps++;
 #endif /* MULTISESSION */
 	}
@@ -963,6 +998,7 @@
 			need_gps++;
 
 		if (!nowait && !need_gps && channel->device->gpsdata.gps_fd > -1) {
+			if (!em_isemate())
 		    FD_CLR(channel->device->gpsdata.gps_fd, &all_fds);
 		    gpsd_deactivate(channel->device);
 		    if (channel->state == CHANNEL_KILLED)
@@ -972,7 +1008,8 @@
 	}
 #else
 	if (!nowait && !need_gps && device->gpsdata.gps_fd != -1) {
-	    FD_CLR(device->gpsdata.gps_fd, &all_fds);
+	    if (!em_isemate())
+	       FD_CLR(device->gpsdata.gps_fd, &all_fds);
 	    gpsd_deactivate(device);
 	}
 #endif /* MULTISESSION */
--- a/libgpsd_core.c	2005-03-31 13:48:57.000000000 -0600
+++ b/libgpsd_core.c	2005-04-01 20:36:07.340136224 -0600
@@ -8,6 +8,7 @@
 #include <sys/ioctl.h>
 #include <sys/socket.h>
 #include <sys/time.h>
+#include <emul.h>
 #include "config.h"
 #ifdef HAVE_SYS_FILIO_H
 #include <sys/filio.h>	/* for FIONREAD on BSD systems */
@@ -117,8 +118,12 @@
 static int is_input_waiting(int fd)
 {
     int	count;
+	 if (fd == 0 && em_isemate()) {
+	 	count = em_read_data_avail();
+	} else {
     if (fd < 0 || ioctl(fd, FIONREAD, &count) < 0)
 	return -1;
+	}
     return count;
 }
 
--- a/packet.c	2005-03-31 00:23:29.000000000 -0600
+++ b/packet.c	2005-04-02 00:23:37.137051680 -0600
@@ -36,6 +36,7 @@
 #endif
 
 #include "gpsd.h"
+#include <emul.h>
 
 #ifdef TESTMAIN
 #include <stdarg.h>
@@ -384,7 +385,7 @@
     if (waiting > room)
 	waiting = room;
 
-    newdata = read(session->gpsdata.gps_fd, session->inbufptr, waiting);
+    newdata = READ(session->gpsdata.gps_fd, session->inbufptr, waiting);
 #else
     newdata = waiting;
 #endif /* TESTMAIN */
@@ -507,8 +508,12 @@
     gpsd_report(5, "packet_sniff begins\n");
     for (n = 0; n < SNIFF_RETRIES; n += count) {
 	count = 0;
+	if (!em_isemate()) {
 	if (ioctl(session->gpsdata.gps_fd, FIONREAD, &count) < 0)
 	    return BAD_PACKET;
+	} else {
+		count = em_read_data_avail();
+	}
 	if (count && packet_get(session, count)) {
 	    /* push back the last packet grabbed */
 	    if (session->outbuflen + session->inbuflen < MAX_PACKET_LENGTH) {
--- gpsd-orig/gpsd-2.20/serial.c	2005-03-28 10:28:03.000000000 -0600
+++ gpsd-2.20/serial.c	2005-04-02 13:15:48.476200672 -0600
@@ -4,6 +4,7 @@
 #include <fcntl.h>
 #include <errno.h>
 #include <ctype.h>
+#include <emul.h>
 #if defined(HAVE_SYS_MODEM_H)
 #include <sys/modem.h>
 #endif /* HAVE_SYS_MODEM_H */
@@ -37,6 +38,7 @@
 		   unsigned int speed, unsigned int stopbits)
 {
     unsigned int	rate;
+    struct serconfig sconfig;
 
     if (speed < 300)
 	rate = 0;
@@ -57,6 +59,7 @@
     else
       rate =  B57600;
 
+	if (!em_isemate()) {
     tcflush(session->gpsdata.gps_fd, TCIOFLUSH);	/* toss stale data */
     if (speed!=cfgetispeed(&session->ttyset) || stopbits!=session->gpsdata.stopbits) {
 	cfsetispeed(&session->ttyset, (speed_t)rate);
@@ -67,6 +70,19 @@
 	    return 0;
 	tcflush(session->gpsdata.gps_fd, TCIOFLUSH);
     }
+	} else {
+		em_flush(TCIOFLUSH);
+		if (speed!=cfgetispeed(&session->ttyset) || stopbits!=session->gpsdata.stopbits) {
+			cfsetispeed(&session->ttyset, (speed_t)rate);
+			cfsetospeed(&session->ttyset, (speed_t)rate);
+			sconfig.baudrate = em_getbaudmask(rate);
+			sconfig.databits = (stopbits==2 ? 7 : 8);
+			sconfig.stopbits = stopbits;
+			sconfig.parity = PAR_NONE;
+			em_serconfig_set(&sconfig);
+			em_flush(TCIOFLUSH);
+		}
+	}
 
     if ((session->packet_type = packet_sniff(session)) == BAD_PACKET)
 	return 0;
@@ -84,14 +100,24 @@
     /* every rate we're likely to see on a GPS */
     static unsigned int rates[] = {4800, 9600, 19200, 38400, 57600};
 
+	 if (em_isemate()) {
+	 	gpsd_report(1, "opening Earthmate GPS (emul library)\n");
+		if (em_open() < 0) {
+			gpsd_report(1, "device open failed\n");
+			return -1;
+		}
+		session->gpsdata.gps_fd = 0;
+		em_linecontrol(CONTROL_DTR | CONTROL_RTS);
+	 } else {
     gpsd_report(1, "opening GPS data source at %s\n", session->gpsd_device);
     if ((session->gpsdata.gps_fd = open(session->gpsd_device, O_RDWR|O_NOCTTY)) < 0) {
 	gpsd_report(1, "device open failed: %s\n", strerror(errno));
 	return -1;
     }
+	 }
 
     session->packet_type = BAD_PACKET;
-    if (isatty(session->gpsdata.gps_fd)) {
+    if ((em_isemate() ? 1 : isatty(session->gpsdata.gps_fd))) {
 #ifdef NON_NMEA_ENABLE
 	struct gps_type_t **dp;
 
@@ -106,6 +132,7 @@
 	gpsd_report(3, "no probe matched...\n");
 #endif /* NON_NMEA_ENABLE */
 
+	if (!em_isemate()) {
 	/* Save original terminal parameters */
 	if (tcgetattr(session->gpsdata.gps_fd,&session->ttyset_old) != 0)
 	  return -1;
@@ -119,6 +146,7 @@
 	session->ttyset.c_cflag |= CREAD | CLOCAL;
 	session->ttyset.c_iflag = session->ttyset.c_oflag = session->ttyset.c_lflag = (tcflag_t) 0;
 	session->ttyset.c_oflag = (ONLCR);
+	}
 
 	if (session->gpsdata.baudrate) {
 	    gpsd_report(1, "setting speed %d, %d stopbits, no parity\n", 
@@ -144,6 +172,13 @@
 
 void gpsd_close(struct gps_device_t *session)
 {
+	if (em_isemate() && em_isactive()) {
+		em_linecontrol(CONTROL_DROP);
+		em_close();
+		return;
+	} else if (em_isemate())
+		return;
+
     if (session->gpsdata.gps_fd != -1) {
 	if (isatty(session->gpsdata.gps_fd)) {
 	    /* force hangup on close on systems that don't do HUPCL properly */
--- a/sirf.c	2005-03-31 11:06:23.000000000 -0600
+++ b/sirf.c	2005-04-01 21:55:45.451752848 -0600
@@ -28,6 +28,7 @@
 #include <time.h>
 #include <sys/types.h>
 #include <stdio.h>
+#include <emul.h>
 
 #include "gpsd.h"
 #if defined(SIRFII_ENABLE) && defined(BINARY_ENABLE)
@@ -58,8 +59,11 @@
    for (i = 0; i < len+8; i++)
        sprintf(buf+strlen(buf), " %02x", msg[i]);
    gpsd_report(4, "Writing SiRF control type %02x:%s\n", msg[4], buf);
-   ok = write(fd, msg, len+8) == len+8;
-   tcdrain(fd);
+   ok = WRITE(fd, msg, len+8) == len+8;
+   if (!em_isemate())
+      tcdrain(fd);
+   else
+      em_writewait();
    return(ok);
 }
 
--- a/sirfmon.c	2005-03-31 13:39:43.000000000 -0600
+++ b/sirfmon.c	2005-04-02 00:54:15.339602416 -0600
@@ -28,6 +28,7 @@
 #include <time.h>
 #include <termios.h>
 #include <fcntl.h>	/* for O_RDWR */
+#include <emul.h>
 #include "gpsutils.h"
 #include "config.h"
 
@@ -90,7 +91,7 @@
 
 static struct termios ttyset;
 static WINDOW *mid2win, *mid4win, *mid6win, *mid7win, *mid9win, *mid13win;
-static WINDOW *mid19win, *mid27win, *cmdwin, *debugwin;
+static WINDOW *mid19win, *mid27win, *cmdwin, *emulwin, *debugwin;
 
 #define NO_PACKET	0
 #define SIRF_PACKET	1
@@ -101,6 +102,8 @@
     unsigned int	rate, count, state;
     int st;
     unsigned char	c;
+    struct serconfig sconfig;
+    struct timeval tv;
 
     if (speed < 300)
 	rate = 0;
@@ -121,6 +124,7 @@
     else
       rate =  B57600;
 
+    if (!em_isemate()) {
     tcflush(LineFd, TCIOFLUSH);	/* toss stale data */
     cfsetispeed(&ttyset, (speed_t)rate);
     cfsetospeed(&ttyset, (speed_t)rate);
@@ -129,11 +133,27 @@
     if (tcsetattr(LineFd, TCSANOW, &ttyset) != 0)
 	return NO_PACKET;
     tcflush(LineFd, TCIOFLUSH);
+    } else {
+    em_flush(TCIOFLUSH);
+    cfsetispeed(&ttyset, (speed_t)rate);
+    cfsetospeed(&ttyset, (speed_t)rate);
+    sconfig.baudrate = em_getbaudmask(rate);
+    sconfig.databits = (stopbits==2 ? 7 : 8);
+    sconfig.stopbits = stopbits;
+    sconfig.parity = PAR_NONE;
+    em_serconfig_set(&sconfig);
+    em_flush(TCIOFLUSH);
+    }
 
     /* sniff for NMEA or SiRF packet */
     state = 0;
     for (count = 0; count < SNIFF_RETRIES; count++) {
-	if ((st = read(LineFd, &c, 1)) < 0)
+	if (em_isemate()) {
+		tv.tv_sec = 0;
+		tv.tv_usec = 100000;
+		em_datawait(&tv, 0);
+	}
+	if ((st = READ(LineFd, &c, 1)) < 0)
 	    return 0;
 	else
 	    count += st;
@@ -198,7 +218,7 @@
     va_end(ap);
     strcat(buf, "*");
     nmea_add_checksum(buf);
-    status = write(fd, buf, strlen(buf));
+    status = WRITE(fd, buf, strlen(buf));
     if (status == strlen(buf)) {
 	return status;
     } else {
@@ -216,10 +236,12 @@
      * 200 (and possibly other USB GPSes) gets completely hosed
      * in the presence of flow control.  Thus, turn off CRTSCTS.
      */
+    if (!em_isemate()) {
     ttyset.c_cflag &= ~(PARENB | CRTSCTS);
     ttyset.c_cflag |= CREAD | CLOCAL;
     ttyset.c_iflag = ttyset.c_oflag = ttyset.c_lflag = (tcflag_t) 0;
     ttyset.c_oflag = (ONLCR);
+    }
 
     for (stopbits = 1; stopbits <= 2; stopbits++) {
 	*pstopbits = stopbits;
@@ -291,16 +313,35 @@
 	exit(1);
     }
 
+    if (strcmp(argv[1], "emate")==0)
+       em_devtype(EMATE);
+    else
+       em_devtype(NORMAL);
+
+	 if (!em_isemate())
     if ((LineFd = open(argv[1],O_RDWR)) < 0) {
 	perror(argv[1]);
 	return 1;
     }
-    
+
+	if (!em_isemate()) {
     /* Save original terminal parameters */
     if (tcgetattr(LineFd, &ttyset) != 0 || !(bps = hunt_open(&stopbits))) {
 	fputs("Can't sync up with device!\n", stderr);
 	exit(1);
     }
+	} else {
+	if (em_open()<0) {
+    fprintf(stderr, "Failed to open earthmate device, check permissions?\n");
+    exit(1);
+	}
+    em_linecontrol(CONTROL_DTR | CONTROL_RTS);
+
+	if (!(bps = hunt_open(&stopbits))) {
+		fputs("Can't sync up with device!\n", stderr);
+		exit(1);
+	}
+	}
 
     initscr();
     cbreak();
@@ -317,7 +358,12 @@
     mid19win  = newwin(17, 48,  7, 32);
     mid27win  = newwin(4,  48, 20, 32);
     cmdwin    = newwin(2,  30, 22, 0);
-    debugwin  = newwin(0,   0, 24, 0);
+    if (em_isemate()) {
+    emulwin   = subwin(stdscr, 3,  80, 24, 0);
+    debugwin  = subwin(stdscr, 0,   0, 27, 0);
+    } else {
+    debugwin = subwin(stdscr, 0, 0, 24, 0);
+    }
     scrollok(debugwin,TRUE);
     wsetscrreg(debugwin, 0, LINES-21);
 
@@ -416,6 +462,15 @@
     wattrset(cmdwin, A_NORMAL);
     mvwprintw(cmdwin, 1, 15, "%4d N %d", bps, stopbits);
 
+    if (em_isemate()) {
+    wborder(emulwin, 0, 0, 0, 0, 0, 0, 0, 0),
+    wattrset(emulwin, A_BOLD);
+    mvwprintw(emulwin, 1, 2, "Read queue: ");
+    mvwprintw(emulwin, 1, 45, "Write queue: ");
+    mvwprintw(emulwin, 2, 45, " Earthmate Buffer(MAX 4096 R/W) ");
+    wattrset(emulwin, A_NORMAL);
+    }
+
     wmove(debugwin,0, 0);
 
     FD_ZERO(&select_set);
@@ -438,14 +493,27 @@
 	    touchwin(mid19win);
 	    wrefresh(mid19win);
 	}
+	if (em_isemate())
+	   wrefresh(emulwin);
 	wrefresh(debugwin);
 	wrefresh(cmdwin);
 
+   if (em_isemate()) {
+   mvwprintw(emulwin, 1, 15, "%d bytes  ", em_read_data_avail());
+   mvwprintw(emulwin, 1, 60, "%d bytes  ", em_write_data_avail());
+   }
+
 	FD_SET(0,&select_set);
-	FD_SET(LineFd,&select_set);
+	if (!em_isemate())
+		FD_SET(LineFd,&select_set);
 
-	if (select(LineFd + 1,&select_set,NULL,NULL,NULL) < 0)
-	    break;
+	if (!em_isemate()) {
+		if (select(LineFd + 1,&select_set,NULL,NULL,NULL) < 0)
+			break;
+	} else {
+		if (em_select(1, &select_set,NULL,NULL,NULL) < 0)
+			break;
+	}
 
 	if (FD_ISSET(0,&select_set)) {
 	    wmove(cmdwin, 0,5);
@@ -465,6 +533,8 @@
 		wrefresh(mid19win);
 	    }
 	    wrefresh(mid19win);
+	    if (em_isemate())
+	       wrefresh(emulwin);
 	    wrefresh(debugwin);
 	    wrefresh(cmdwin);
 
@@ -584,6 +654,11 @@
     if (logfile != NULL)
 	fclose(logfile);
 
+    if (em_isemate()) {
+       em_linecontrol(CONTROL_DROP);
+       em_close();
+    }
+
     endwin();
     exit(0);
 }
@@ -967,19 +1042,25 @@
 	struct timeval timeval;
 
 	FD_ZERO(&select_set);
-	FD_SET(LineFd,&select_set);
+	if (!em_isemate())
+		FD_SET(LineFd,&select_set);
 	timeval.tv_sec = 0;
 	timeval.tv_usec = 500000;
 
+	if (!em_isemate()) {
 	if (select(LineFd + 1,&select_set,NULL,NULL,&timeval) < 0)
 	    return EOF;
 
 	if (!FD_ISSET(LineFd,&select_set))
 	    return EOF;
+	} else {
+		if (em_datawait(&timeval, 0)<1)
+			return EOF;
+	}
 
 	usleep(100000);
 
-	if ((cnt = read(LineFd,inbuf,BUFLEN)) <= 0)
+	if ((cnt = READ(LineFd,inbuf,BUFLEN)) <= 0)
 	    return EOF;
 
 	pos = 0;
@@ -1055,5 +1136,5 @@
 	wprintw(debugwin, " %02x",buf[i]);
     wprintw(debugwin, "\n");
 
-    return (write(LineFd,buf,len) == len);
+    return (WRITE(LineFd,buf,len) == len);
 }
--- a/zodiac.c	2005-03-30 17:26:28.000000000 -0600
+++ b/zodiac.c	2005-04-01 20:17:23.762945920 -0600
@@ -45,7 +45,7 @@
 	*p++ = *(data+1); *p++ = *data;
 	data += 2; len -= 2;
     }
-    return write(fd, buf, len);
+    return WRITE(fd, buf, len);
 }
 #else
 #define end_write write
